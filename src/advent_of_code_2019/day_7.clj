(ns advent-of-code-2019.day-7
  (:require [advent-of-code-2019.util :as u]
            [clojure.math.combinatorics :as c]
            [clojure.core.async :as a]
            [advent-of-code-2019.intcode :as intcode]
            [clojure.string :as str]))

(defn amplifier-controller []
  [3,8,1001,8,10,8,105,1,0,0,21,42,55,64,85,98,179,260,341,422,99999,3,9,101,2,9,9,102,5,9,9,1001,9,2,9,1002,9,5,9,4,9,99,3,9,1001,9,5,9,1002,9,4,9,4,9,99,3,9,101,3,9,9,4,9,99,3,9,1002,9,4,9,101,3,9,9,102,5,9,9,101,4,9,9,4,9,99,3,9,1002,9,3,9,1001,9,3,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99])

(defn amp-2 []
  [3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5])

(defn execute-amplifiers [phase-range]
  (let [vals (for [phases (c/permutations phase-range)]
               (let [channels (repeatedly 5 #(a/chan 10))
                     connections [0 1 1 2 2 3 3 4 4 0]
                     channel-pairs (partition 2 (map #(nth channels %) connections))
                     amps (map
                           (fn [[in out]] (second (intcode/setup (amplifier-controller) {:input in :output out})))
                           channel-pairs)]

                 (doseq [[channel phase] (partition 2 (interleave channels phases))]
                   (a/>!! channel phase))

                 (a/>!! (first channels) 0)

                 (doseq [amp amps] (intcode/exec amp))

                 (apply await amps)

                 (-> amps
                     last
                     deref
                     last
                     :output
                     a/<!!)))]

    (apply max vals)))


(defn day-7-1 []
  (execute-amplifiers (range 5)))

(defn day-7-2 []
  (execute-amplifiers (range 5 10)))
